{"version":3,"sources":["Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Calculator","state","num1","operator","text","hasBinOperator","handleClear","setState","handleClickNumber","e","length","alert","number","target","innerText","newText","handleClickOperator","last_char","hasBinOperatorLast","res","math","isInt","toString","toFixed","replace","slice","handleEqual","num2","isValidExpression","console","log","n","className","id","style","fontSize","this","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fe37544.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport React, { Component } from 'react'\r\nimport * as math from 'mathjs'\r\nimport './App.css'\r\n\r\nexport default class Calculator extends Component {\r\n\r\n                                             /* STATE*/\r\n    state={\r\n        num1:\"0\",\r\n        operator:\"\",\r\n        text:\"0\",\r\n        hasBinOperator:false\r\n    }\r\n\r\n                                            /* CLEAR FIELDS */\r\n    handleClear=()=>{\r\n        this.setState({\r\n            text:\"0\",\r\n            num1:\"0\",\r\n            operator:\"\",\r\n            hasBinOperator:false\r\n\r\n        })\r\n    }\r\n\r\n                                            /* HANDLE CLICK NUMBER */\r\n    handleClickNumber=(e)=>{\r\n        if(this.state.text.length>20)\r\n        {\r\n            alert(\"Click \\\"=\\\" and then continue\");\r\n        }\r\n        else\r\n        {\r\n            const {text,num1}=this.state\r\n            const number=e.target.innerText\r\n                let newText=text\r\n                text===\"0\"? newText=number:newText+=number\r\n                this.setState({num1:num1===\"0\"?number:num1+number})\r\n                this.setState({\r\n                    text:newText\r\n                })\r\n        }\r\n        \r\n    }\r\n\r\n                                            /* HANDLE CLICK OPERATOR */\r\n    handleClickOperator=(e)=>{\r\n        if(this.state.text.length>20)\r\n        {\r\n            alert(\"Click \\\"=\\\" and then continue\");\r\n        }\r\n        else\r\n        {\r\n            let operator=e.target.innerText\r\n            operator=operator===\"xy\"?\"^\":operator===\"×\"?\"*\":operator===\"÷\"?\"/\":operator\r\n            const {text,num1}=this.state\r\n            const last_char=text[text.length-1]\r\n            const hasBinOperatorLast=last_char===\"+\"||last_char===\"-\"||last_char===\"*\"||last_char===\"/\"||last_char===\"^\"\r\n            //unary operator\r\n            if((operator===\"√\"||operator===\"+/-\")){\r\n            if(hasBinOperatorLast){\r\n                alert(\"Ifoda noto'g'ri kiritilgan.Iltimos,qaytadan tekshirib urinib ko'ring\")\r\n            }\r\n            else{\r\n\r\n                \r\n                    let res=0\r\n                    const number=this.state.num1;\r\n                    operator===\"+/-\" ?res=-number:res=math.sqrt(number);\r\n                    res=this.isInt(res)? res:res.toString().length>10?res.toFixed(10):res.toString()\r\n                    if(!this.state.hasBinOperator){\r\n                        \r\n                        this.setState({\r\n                            text:res.toString(),\r\n                            operator:\"\"\r\n                        })\r\n                    }\r\n                    else{\r\n                        this.setState({\r\n                            text:operator===\"+/-\"?this.state.text.replace(this.state.num1.toString(),\"(\"+res+\")\"):this.state.text.replace(this.state.num1.toString(),res)\r\n                        })\r\n                    }\r\n            }   \r\n            }\r\n            else{\r\n                this.setState({\r\n                operator,\r\n                    num1:\"0\",\r\n                    text: hasBinOperatorLast?text.slice(0,text.length-1)+operator:this.state.text+operator,\r\n                    hasBinOperator:true\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n                                            /* HANDLE EQUAL(=) BUTTON */\r\n    handleEqual=(e)=>{\r\n        const {operator,num1,num2,text}=this.state\r\n        const last_char=text[text.length-1]\r\n        const isValidExpression=last_char!==\"+\"&&last_char!==\"-\"&&last_char!==\"*\"&&last_char!==\"/\"&&last_char!==\"^\"\r\n        if(operator!==\"\"&&isValidExpression){\r\n            let res=math.evaluate(text)\r\n            if(res>math.evaluate(\"10^20\"))\r\n            {\r\n                alert(\"Overflow.Too Big!!!\")\r\n            }\r\n            else{\r\n                console.log(res)\r\n                this.setState({\r\n                text:this.isInt(res)? res:res.toString().length>10?res.toFixed(10):res.toString(),\r\n                num1:\"0\",\r\n                operator:\"\",\r\n                hasBinOperator:false\r\n            })\r\n            }\r\n            \r\n        }\r\n        else if(!isValidExpression){\r\n            alert(\"Ifoda noto'g'ri kiritilgan.Iltimos,qaytadan tekshirib urinib ko'ring\")\r\n        }\r\n        \r\n    }\r\n    isInt(n) {\r\n        return n % 1 === 0;\r\n     }\r\n\r\n    \r\n\r\n                                            /* RENDER */\r\n    render() {\r\n        const fontStyle={fontSize:\"1.2em\"}\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"unselectable\" id=\"calculator\">\r\n                    {/*  Screen and C key */}\r\n                    <div className=\"top\">\r\n                        <div id=\"display\" style={fontStyle}>{this.state.text}</div>\r\n                    </div>\r\n                    <div className=\"keys\">\r\n                        {/*  keys */}\r\n                        <span className=\"btn operator\"onClick={this.handleClickOperator}>+</span> \r\n                        <span className=\"btn operator\"onClick={this.handleClickOperator}>-</span> \r\n                        <span className=\"btn operator\"onClick={this.handleClickOperator}>×</span> \r\n                        <span className=\"btn operator\"onClick={this.handleClickOperator}>&divide;</span>\r\n                        <span className=\"btn number\" onClick={this.handleClickNumber}>7</span> \r\n                        <span className=\"btn number\" onClick={this.handleClickNumber}>8</span> \r\n                        <span className=\"btn number\" onClick={this.handleClickNumber}>9</span> \r\n                        <span className=\"btn operator\" onClick={this.handleClickOperator}>&radic;</span>\r\n                        <span className=\"btn number\" onClick={this.handleClickNumber}>4</span> \r\n                        <span className=\"btn number\" onClick={this.handleClickNumber}>5</span> \r\n                        <span className=\"btn number\" onClick={this.handleClickNumber}>6</span> \r\n                        <span className=\"btn operator\"onClick={this.handleClickOperator}>x<sup>y</sup></span>\r\n                        <span className=\"btn number\" onClick={this.handleClickNumber}>1</span> \r\n                        <span className=\"btn number\" onClick={this.handleClickNumber}>2</span> \r\n                        <span className=\"btn number\" onClick={this.handleClickNumber}>3</span> \r\n                        <span className=\"btn \" id=\"pnsign\" onClick={this.handleClickOperator}>+/-</span>\r\n                        <span className=\"btn number\" onClick={this.handleClickNumber}>0</span> \r\n                        <span className=\"btn number\" onClick={this.handleClickNumber}>.</span> \r\n                        <span className=\"btn operator\" id=\"eval\" onClick={this.handleEqual}>=</span> \r\n                        <span className=\"btn clear\" onClick={this.handleClear}>C</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n","import Calculator from './Calculator'\nfunction App() {\n  return (\n    <Calculator/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}